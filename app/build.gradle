plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlinx-serialization'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id("org.jlleitschuh.gradle.ktlint") version "10.2.1"
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.tlgbltcn.jetaxi"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {

        debug {
            buildConfigField "String", "API_URL", "\"https://fake-poi-api.mytaxi.com/\""
        }

        release {
            minifyEnabled false
            buildConfigField "String", "API_URL", "\"https://fake-poi-api.mytaxi.com/\""
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
        kotlinCompilerVersion '1.5.21'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    testOptions {
        unitTests.includeAndroidResources = true
    }
}

dependencies {

    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_ktx_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.collection:collection-ktx:$collection_ktx_version"
    implementation "com.google.android.libraries.maps:maps:$google_maps_version"
    implementation "com.google.maps.android:maps-v3-ktx:$google_maps_ktx_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_ktx_version"

    // Compose
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "com.google.accompanist:accompanist-insets:$accompanist_version"
    implementation "com.google.accompanist:accompanist-navigation-animation:$accompanist_version"
    implementation "com.google.accompanist:accompanist-pager:$accompanist_version"
    implementation "androidx.compose.runtime:runtime:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation "androidx.activity:activity-compose:$activity_compose_version"
    implementation "androidx.constraintlayout:constraintlayout-compose:$constraint_layout_compose_version"
    implementation "com.squareup.radiography:radiography:$radiography_version"

    // Network
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:$retrofit_serialization_converter_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"
    implementation "io.coil-kt:coil-compose:$coil_version"
    debugImplementation "com.github.chuckerteam.chucker:library:$chucker_version"
    constraints {
        implementation("com.android.volley:volley:$volley_version") {
            because("Only volley 1.2.0 or newer are available on maven.google.com")
        }
    }

    // Asynchronous
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_version"

    // DI
    implementation "com.google.dagger:hilt-android:$hilt_gradle_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_gradle_version"
    implementation "androidx.hilt:hilt-navigation-compose:$hilt_compose_navigation_version"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_gradle_version"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$hilt_gradle_version"

    // Test
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "androidx.test.ext:junit:$junit_ext_version"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "org.robolectric:robolectric:4.7.3"
    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "androidx.test:rules:1.4.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core_version"
    testImplementation "androidx.arch.core:core-testing:$arch_core_test_version"
    testImplementation "com.google.truth:truth:$truth_version"
    testImplementation "androidx.test.ext:truth:$truth_ext_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mock_web_server_version"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"
}